name: NPM Publish

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish'
        required: true
        type: string
      dry_run:
        description: 'Dry run (test publish without actually publishing)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'

concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: false

jobs:
  pre-publish-checks:
    name: Pre-publish Checks
    runs-on: ubuntu-latest
    outputs:
      package-version: ${{ steps.package-info.outputs.version }}
      package-name: ${{ steps.package-info.outputs.name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Extract package info
      id: package-info
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        PACKAGE_NAME=$(node -p "require('./package.json').name")
        echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
        echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
        echo "Package: $PACKAGE_NAME@$PACKAGE_VERSION"
    
    - name: Check if version exists on npm
      run: |
        PACKAGE_VERSION="${{ steps.package-info.outputs.version }}"
        PACKAGE_NAME="${{ steps.package-info.outputs.name }}"
        
        if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version 2>/dev/null; then
          echo "❌ Version $PACKAGE_VERSION already exists on npm!"
          echo "Please bump the version before publishing."
          exit 1
        else
          echo "✅ Version $PACKAGE_VERSION is available for publishing"
        fi
    
    - name: Run tests
      run: npm test
      env:
        NODE_OPTIONS: '--experimental-vm-modules'
    
    - name: Build project
      run: npm run build
    
    - name: Validate package
      run: |
        echo "Performing comprehensive package validation..."
        
        # Check that dist directory exists and has content
        if [ ! -d "dist" ] || [ -z "$(ls -A dist 2>/dev/null)" ]; then
          echo "❌ dist directory is missing or empty"
          exit 1
        fi
        
        # Check for essential CLI files (flexible check)
        CLI_FILES_FOUND=false
        if [ -f "dist/cli/index.js" ] || [ -f "dist/cli/simple-index.js" ] || [ -f "dist/cli/gemini-cli.js" ]; then
          CLI_FILES_FOUND=true
          echo "✅ CLI files found"
        else
          echo "❌ No CLI files found"
          echo "Available files:"
          find dist -type f -name "*.js" | head -10 || echo "No JS files in dist"
          exit 1
        fi
        
        # Test package locally
        echo "Creating and testing package..."
        npm pack
        TARBALL=$(ls *.tgz | head -1)
        echo "Created tarball: $TARBALL"
        
        # Extract and verify contents
        mkdir -p /tmp/package-test
        tar -xzf "$TARBALL" -C /tmp/package-test
        
        echo "Package contents:"
        find /tmp/package-test -type f | head -20
        
        # Verify essential files are in package
        if [ ! -f "/tmp/package-test/package/package.json" ]; then
          echo "❌ package.json not found in package"
          exit 1
        fi
        
        # Check bin directory or files
        if [ -d "/tmp/package-test/package/bin" ] || find "/tmp/package-test/package" -name "gemini-flow" -type f | head -1; then
          echo "✅ Binary files found in package"
        else
          echo "⚠️ No binary files found, checking if CLI is accessible"
        fi
        
        # Verify dist files are included
        if find "/tmp/package-test/package/dist" -name "*.js" | head -1; then
          echo "✅ Dist files included in package"
        else
          echo "❌ No dist files found in package"
          exit 1
        fi
        
        # Test installation in isolated environment
        echo "Testing package installation..."
        cd /tmp/package-test
        npm init -y
        npm install ./package/*.tgz
        
        # Test if CLI is accessible through npx
        echo "Testing CLI accessibility..."
        npx gemini-flow --version >/dev/null 2>&1 || echo "⚠️ CLI not accessible via npx (may be normal)"
        
        echo "✅ Package validation completed"

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: pre-publish-checks
    environment: production
    
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Update version if manual trigger
      if: github.event_name == 'workflow_dispatch'
      run: npm version ${{ github.event.inputs.version }} --no-git-tag-version
    
    - name: Dry run publish
      if: github.event.inputs.dry_run == 'true'
      run: |
        echo "🧪 Performing dry run publish..."
        npm publish --dry-run --access public
        echo "✅ Dry run completed successfully"
    
    - name: Publish to NPM
      if: github.event.inputs.dry_run != 'true'
      run: |
        echo "🚀 Publishing to NPM..."
        npm publish --access public
        echo "✅ Successfully published to NPM"
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Verify publication
      if: github.event.inputs.dry_run != 'true'
      run: |
        PACKAGE_VERSION="${{ needs.pre-publish-checks.outputs.package-version }}"
        PACKAGE_NAME="${{ needs.pre-publish-checks.outputs.package-name }}"
        
        # Wait a bit for npm to propagate
        sleep 30
        
        # Verify the package is available
        if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version; then
          echo "✅ Package successfully published and available on npm"
        else
          echo "❌ Package publication verification failed"
          exit 1
        fi
    
    - name: Create GitHub Release
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        release_name: Release v${{ github.event.inputs.version }}
        body: |
          ## 📦 NPM Package Release
          
          **Version:** ${{ github.event.inputs.version }}
          **Package:** `${{ needs.pre-publish-checks.outputs.package-name }}`
          **Install:** `npm install ${{ needs.pre-publish-checks.outputs.package-name }}@${{ github.event.inputs.version }}`
          
          ## Changes
          
          Automated release for version ${{ github.event.inputs.version }}
          
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
        draft: false
        prerelease: false

  post-publish:
    name: Post-publish Actions
    runs-on: ubuntu-latest
    needs: [pre-publish-checks, publish]
    if: success() && github.event.inputs.dry_run != 'true'
    
    steps:
    - name: Notify success
      run: |
        echo "🎉 Successfully published ${{ needs.pre-publish-checks.outputs.package-name }}@${{ needs.pre-publish-checks.outputs.package-version }}"
        echo "📦 npm install ${{ needs.pre-publish-checks.outputs.package-name }}"
        echo "🌐 https://www.npmjs.com/package/${{ needs.pre-publish-checks.outputs.package-name }}"