# Docker Compose for Gemini Flow Backend with Prometheus and Grafana
#
# This compose file sets up:
# - Gemini Flow Backend
# - Prometheus (metrics collection)
# - Grafana (visualization)
#
# Usage:
#   docker-compose -f monitoring/docker-compose.yml up -d
#
# Access:
#   - Backend: http://localhost:3001
#   - Prometheus: http://localhost:9090
#   - Grafana: http://localhost:3000 (admin/admin)

version: '3.8'

services:
  # Gemini Flow Backend
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: gemini-flow-backend
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY}
    networks:
      - monitoring
    restart: unless-stopped

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: gemini-flow-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - backend

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: gemini-flow-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-dashboard.json:/etc/grafana/provisioning/dashboards/gemini-flow.json:ro
      - ./grafana-datasource.yml:/etc/grafana/provisioning/datasources/prometheus.yml:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_INSTALL_PLUGINS=
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus

networks:
  monitoring:
    driver: bridge

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
